// Code generated by MockGen. DO NOT EDIT.
// Source: liquiswiss/internal/service/api_service (interfaces: IAPIService)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination ../../mocks/api_service.go liquiswiss/internal/service/api_service IAPIService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "liquiswiss/pkg/models"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockIAPIService is a mock of IAPIService interface.
type MockIAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockIAPIServiceMockRecorder
	isgomock struct{}
}

// MockIAPIServiceMockRecorder is the mock recorder for MockIAPIService.
type MockIAPIServiceMockRecorder struct {
	mock *MockIAPIService
}

// NewMockIAPIService creates a new mock instance.
func NewMockIAPIService(ctrl *gomock.Controller) *MockIAPIService {
	mock := &MockIAPIService{ctrl: ctrl}
	mock.recorder = &MockIAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAPIService) EXPECT() *MockIAPIServiceMockRecorder {
	return m.recorder
}

// CalculateForecast mocks base method.
func (m *MockIAPIService) CalculateForecast(userID int64) ([]models.Forecast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateForecast", userID)
	ret0, _ := ret[0].([]models.Forecast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateForecast indicates an expected call of CalculateForecast.
func (mr *MockIAPIServiceMockRecorder) CalculateForecast(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateForecast", reflect.TypeOf((*MockIAPIService)(nil).CalculateForecast), userID)
}

// CheckRegistrationCode mocks base method.
func (m *MockIAPIService) CheckRegistrationCode(payload models.CheckRegistrationCode, validity time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRegistrationCode", payload, validity)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRegistrationCode indicates an expected call of CheckRegistrationCode.
func (mr *MockIAPIServiceMockRecorder) CheckRegistrationCode(payload, validity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRegistrationCode", reflect.TypeOf((*MockIAPIService)(nil).CheckRegistrationCode), payload, validity)
}

// CheckResetPasswordCode mocks base method.
func (m *MockIAPIService) CheckResetPasswordCode(payload models.CheckResetPasswordCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckResetPasswordCode", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckResetPasswordCode indicates an expected call of CheckResetPasswordCode.
func (mr *MockIAPIServiceMockRecorder) CheckResetPasswordCode(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckResetPasswordCode", reflect.TypeOf((*MockIAPIService)(nil).CheckResetPasswordCode), payload)
}

// CopySalaryCosts mocks base method.
func (m *MockIAPIService) CopySalaryCosts(payload models.CopySalaryCosts, userID, salaryID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopySalaryCosts", payload, userID, salaryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopySalaryCosts indicates an expected call of CopySalaryCosts.
func (mr *MockIAPIServiceMockRecorder) CopySalaryCosts(payload, userID, salaryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopySalaryCosts", reflect.TypeOf((*MockIAPIService)(nil).CopySalaryCosts), payload, userID, salaryID)
}

// CountCurrencies mocks base method.
func (m *MockIAPIService) CountCurrencies() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCurrencies")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCurrencies indicates an expected call of CountCurrencies.
func (mr *MockIAPIServiceMockRecorder) CountCurrencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCurrencies", reflect.TypeOf((*MockIAPIService)(nil).CountCurrencies))
}

// CountEmployees mocks base method.
func (m *MockIAPIService) CountEmployees(userID, page, limit int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEmployees", userID, page, limit)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEmployees indicates an expected call of CountEmployees.
func (mr *MockIAPIServiceMockRecorder) CountEmployees(userID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEmployees", reflect.TypeOf((*MockIAPIService)(nil).CountEmployees), userID, page, limit)
}

// CountUniqueCurrenciesInFiatRates mocks base method.
func (m *MockIAPIService) CountUniqueCurrenciesInFiatRates() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUniqueCurrenciesInFiatRates")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUniqueCurrenciesInFiatRates indicates an expected call of CountUniqueCurrenciesInFiatRates.
func (mr *MockIAPIServiceMockRecorder) CountUniqueCurrenciesInFiatRates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUniqueCurrenciesInFiatRates", reflect.TypeOf((*MockIAPIService)(nil).CountUniqueCurrenciesInFiatRates))
}

// CreateBankAccount mocks base method.
func (m *MockIAPIService) CreateBankAccount(payload models.CreateBankAccount, userID int64) (*models.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBankAccount", payload, userID)
	ret0, _ := ret[0].(*models.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBankAccount indicates an expected call of CreateBankAccount.
func (mr *MockIAPIServiceMockRecorder) CreateBankAccount(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBankAccount", reflect.TypeOf((*MockIAPIService)(nil).CreateBankAccount), payload, userID)
}

// CreateCategory mocks base method.
func (m *MockIAPIService) CreateCategory(payload models.CreateCategory, userID *int64) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", payload, userID)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockIAPIServiceMockRecorder) CreateCategory(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockIAPIService)(nil).CreateCategory), payload, userID)
}

// CreateCurrency mocks base method.
func (m *MockIAPIService) CreateCurrency(payload models.CreateCurrency) (*models.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCurrency", payload)
	ret0, _ := ret[0].(*models.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCurrency indicates an expected call of CreateCurrency.
func (mr *MockIAPIServiceMockRecorder) CreateCurrency(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCurrency", reflect.TypeOf((*MockIAPIService)(nil).CreateCurrency), payload)
}

// CreateEmployee mocks base method.
func (m *MockIAPIService) CreateEmployee(payload models.CreateEmployee, userID int64) (*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", payload, userID)
	ret0, _ := ret[0].(*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockIAPIServiceMockRecorder) CreateEmployee(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockIAPIService)(nil).CreateEmployee), payload, userID)
}

// CreateForecastExclusion mocks base method.
func (m *MockIAPIService) CreateForecastExclusion(payload models.CreateForecastExclusion, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForecastExclusion", payload, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateForecastExclusion indicates an expected call of CreateForecastExclusion.
func (mr *MockIAPIServiceMockRecorder) CreateForecastExclusion(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForecastExclusion", reflect.TypeOf((*MockIAPIService)(nil).CreateForecastExclusion), payload, userID)
}

// CreateOrganisation mocks base method.
func (m *MockIAPIService) CreateOrganisation(payload models.CreateOrganisation, userID int64) (*models.Organisation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganisation", payload, userID)
	ret0, _ := ret[0].(*models.Organisation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganisation indicates an expected call of CreateOrganisation.
func (mr *MockIAPIServiceMockRecorder) CreateOrganisation(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganisation", reflect.TypeOf((*MockIAPIService)(nil).CreateOrganisation), payload, userID)
}

// CreateRegistration mocks base method.
func (m *MockIAPIService) CreateRegistration(payload models.CreateRegistration, code string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistration", payload, code)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistration indicates an expected call of CreateRegistration.
func (mr *MockIAPIServiceMockRecorder) CreateRegistration(payload, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistration", reflect.TypeOf((*MockIAPIService)(nil).CreateRegistration), payload, code)
}

// CreateSalary mocks base method.
func (m *MockIAPIService) CreateSalary(payload models.CreateSalary, userID, employeeID int64) (*models.Salary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSalary", payload, userID, employeeID)
	ret0, _ := ret[0].(*models.Salary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSalary indicates an expected call of CreateSalary.
func (mr *MockIAPIServiceMockRecorder) CreateSalary(payload, userID, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSalary", reflect.TypeOf((*MockIAPIService)(nil).CreateSalary), payload, userID, employeeID)
}

// CreateSalaryCost mocks base method.
func (m *MockIAPIService) CreateSalaryCost(payload models.CreateSalaryCost, userID, salaryID int64) (*models.SalaryCost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSalaryCost", payload, userID, salaryID)
	ret0, _ := ret[0].(*models.SalaryCost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSalaryCost indicates an expected call of CreateSalaryCost.
func (mr *MockIAPIServiceMockRecorder) CreateSalaryCost(payload, userID, salaryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSalaryCost", reflect.TypeOf((*MockIAPIService)(nil).CreateSalaryCost), payload, userID, salaryID)
}

// CreateSalaryCostLabel mocks base method.
func (m *MockIAPIService) CreateSalaryCostLabel(payload models.CreateSalaryCostLabel, userID int64) (*models.SalaryCostLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSalaryCostLabel", payload, userID)
	ret0, _ := ret[0].(*models.SalaryCostLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSalaryCostLabel indicates an expected call of CreateSalaryCostLabel.
func (mr *MockIAPIServiceMockRecorder) CreateSalaryCostLabel(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSalaryCostLabel", reflect.TypeOf((*MockIAPIService)(nil).CreateSalaryCostLabel), payload, userID)
}

// CreateTransaction mocks base method.
func (m *MockIAPIService) CreateTransaction(payload models.CreateTransaction, userID int64) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", payload, userID)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockIAPIServiceMockRecorder) CreateTransaction(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockIAPIService)(nil).CreateTransaction), payload, userID)
}

// CreateVat mocks base method.
func (m *MockIAPIService) CreateVat(payload models.CreateVat, userID int64) (*models.Vat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVat", payload, userID)
	ret0, _ := ret[0].(*models.Vat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVat indicates an expected call of CreateVat.
func (mr *MockIAPIServiceMockRecorder) CreateVat(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVat", reflect.TypeOf((*MockIAPIService)(nil).CreateVat), payload, userID)
}

// DeleteBankAccount mocks base method.
func (m *MockIAPIService) DeleteBankAccount(userID, bankAccountID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBankAccount", userID, bankAccountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBankAccount indicates an expected call of DeleteBankAccount.
func (mr *MockIAPIServiceMockRecorder) DeleteBankAccount(userID, bankAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBankAccount", reflect.TypeOf((*MockIAPIService)(nil).DeleteBankAccount), userID, bankAccountID)
}

// DeleteEmployee mocks base method.
func (m *MockIAPIService) DeleteEmployee(userID, employeeID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployee", userID, employeeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployee indicates an expected call of DeleteEmployee.
func (mr *MockIAPIServiceMockRecorder) DeleteEmployee(userID, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockIAPIService)(nil).DeleteEmployee), userID, employeeID)
}

// DeleteForecastExclusion mocks base method.
func (m *MockIAPIService) DeleteForecastExclusion(payload models.CreateForecastExclusion, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForecastExclusion", payload, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteForecastExclusion indicates an expected call of DeleteForecastExclusion.
func (mr *MockIAPIServiceMockRecorder) DeleteForecastExclusion(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForecastExclusion", reflect.TypeOf((*MockIAPIService)(nil).DeleteForecastExclusion), payload, userID)
}

// DeleteRegistration mocks base method.
func (m *MockIAPIService) DeleteRegistration(registrationID int64, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistration", registrationID, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRegistration indicates an expected call of DeleteRegistration.
func (mr *MockIAPIServiceMockRecorder) DeleteRegistration(registrationID, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistration", reflect.TypeOf((*MockIAPIService)(nil).DeleteRegistration), registrationID, email)
}

// DeleteSalary mocks base method.
func (m *MockIAPIService) DeleteSalary(userID, salaryID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSalary", userID, salaryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSalary indicates an expected call of DeleteSalary.
func (mr *MockIAPIServiceMockRecorder) DeleteSalary(userID, salaryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSalary", reflect.TypeOf((*MockIAPIService)(nil).DeleteSalary), userID, salaryID)
}

// DeleteSalaryCost mocks base method.
func (m *MockIAPIService) DeleteSalaryCost(userID, salaryCostID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSalaryCost", userID, salaryCostID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSalaryCost indicates an expected call of DeleteSalaryCost.
func (mr *MockIAPIServiceMockRecorder) DeleteSalaryCost(userID, salaryCostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSalaryCost", reflect.TypeOf((*MockIAPIService)(nil).DeleteSalaryCost), userID, salaryCostID)
}

// DeleteSalaryCostLabel mocks base method.
func (m *MockIAPIService) DeleteSalaryCostLabel(userID, salaryCostLabelID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSalaryCostLabel", userID, salaryCostLabelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSalaryCostLabel indicates an expected call of DeleteSalaryCostLabel.
func (mr *MockIAPIServiceMockRecorder) DeleteSalaryCostLabel(userID, salaryCostLabelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSalaryCostLabel", reflect.TypeOf((*MockIAPIService)(nil).DeleteSalaryCostLabel), userID, salaryCostLabelID)
}

// DeleteTransaction mocks base method.
func (m *MockIAPIService) DeleteTransaction(userID, transactionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", userID, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockIAPIServiceMockRecorder) DeleteTransaction(userID, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockIAPIService)(nil).DeleteTransaction), userID, transactionID)
}

// DeleteVat mocks base method.
func (m *MockIAPIService) DeleteVat(userID, vatID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVat", userID, vatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVat indicates an expected call of DeleteVat.
func (mr *MockIAPIServiceMockRecorder) DeleteVat(userID, vatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVat", reflect.TypeOf((*MockIAPIService)(nil).DeleteVat), userID, vatID)
}

// FinishRegistration mocks base method.
func (m *MockIAPIService) FinishRegistration(payload models.FinishRegistration, deviceName string, validity time.Duration) (*models.User, *string, *time.Time, *string, *time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishRegistration", payload, deviceName, validity)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(*time.Time)
	ret3, _ := ret[3].(*string)
	ret4, _ := ret[4].(*time.Time)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// FinishRegistration indicates an expected call of FinishRegistration.
func (mr *MockIAPIServiceMockRecorder) FinishRegistration(payload, deviceName, validity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishRegistration", reflect.TypeOf((*MockIAPIService)(nil).FinishRegistration), payload, deviceName, validity)
}

// ForgotPassword mocks base method.
func (m *MockIAPIService) ForgotPassword(payload models.ForgotPassword, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", payload, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockIAPIServiceMockRecorder) ForgotPassword(payload, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockIAPIService)(nil).ForgotPassword), payload, code)
}

// GetBankAccount mocks base method.
func (m *MockIAPIService) GetBankAccount(userID, bankAccountID int64) (*models.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccount", userID, bankAccountID)
	ret0, _ := ret[0].(*models.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccount indicates an expected call of GetBankAccount.
func (mr *MockIAPIServiceMockRecorder) GetBankAccount(userID, bankAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccount", reflect.TypeOf((*MockIAPIService)(nil).GetBankAccount), userID, bankAccountID)
}

// GetCategory mocks base method.
func (m *MockIAPIService) GetCategory(userID, categoryID int64) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", userID, categoryID)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockIAPIServiceMockRecorder) GetCategory(userID, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockIAPIService)(nil).GetCategory), userID, categoryID)
}

// GetCurrency mocks base method.
func (m *MockIAPIService) GetCurrency(currencyID int64) (*models.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency", currencyID)
	ret0, _ := ret[0].(*models.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockIAPIServiceMockRecorder) GetCurrency(currencyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockIAPIService)(nil).GetCurrency), currencyID)
}

// GetCurrentOrganisation mocks base method.
func (m *MockIAPIService) GetCurrentOrganisation(userID int64) (*models.Organisation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentOrganisation", userID)
	ret0, _ := ret[0].(*models.Organisation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentOrganisation indicates an expected call of GetCurrentOrganisation.
func (mr *MockIAPIServiceMockRecorder) GetCurrentOrganisation(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentOrganisation", reflect.TypeOf((*MockIAPIService)(nil).GetCurrentOrganisation), userID)
}

// GetEmployee mocks base method.
func (m *MockIAPIService) GetEmployee(userID, employeeID int64) (*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployee", userID, employeeID)
	ret0, _ := ret[0].(*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployee indicates an expected call of GetEmployee.
func (mr *MockIAPIServiceMockRecorder) GetEmployee(userID, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployee", reflect.TypeOf((*MockIAPIService)(nil).GetEmployee), userID, employeeID)
}

// GetFiatRate mocks base method.
func (m *MockIAPIService) GetFiatRate(base, target string) (*models.FiatRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiatRate", base, target)
	ret0, _ := ret[0].(*models.FiatRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiatRate indicates an expected call of GetFiatRate.
func (mr *MockIAPIServiceMockRecorder) GetFiatRate(base, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiatRate", reflect.TypeOf((*MockIAPIService)(nil).GetFiatRate), base, target)
}

// GetOrganisation mocks base method.
func (m *MockIAPIService) GetOrganisation(userID, organisationID int64) (*models.Organisation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganisation", userID, organisationID)
	ret0, _ := ret[0].(*models.Organisation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganisation indicates an expected call of GetOrganisation.
func (mr *MockIAPIServiceMockRecorder) GetOrganisation(userID, organisationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganisation", reflect.TypeOf((*MockIAPIService)(nil).GetOrganisation), userID, organisationID)
}

// GetProfile mocks base method.
func (m *MockIAPIService) GetProfile(userID int64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockIAPIServiceMockRecorder) GetProfile(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockIAPIService)(nil).GetProfile), userID)
}

// GetSalary mocks base method.
func (m *MockIAPIService) GetSalary(userID, salaryID int64) (*models.Salary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalary", userID, salaryID)
	ret0, _ := ret[0].(*models.Salary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalary indicates an expected call of GetSalary.
func (mr *MockIAPIServiceMockRecorder) GetSalary(userID, salaryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalary", reflect.TypeOf((*MockIAPIService)(nil).GetSalary), userID, salaryID)
}

// GetSalaryCost mocks base method.
func (m *MockIAPIService) GetSalaryCost(userID, salaryCostID int64, skipPrevious bool) (*models.SalaryCost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalaryCost", userID, salaryCostID, skipPrevious)
	ret0, _ := ret[0].(*models.SalaryCost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalaryCost indicates an expected call of GetSalaryCost.
func (mr *MockIAPIServiceMockRecorder) GetSalaryCost(userID, salaryCostID, skipPrevious any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalaryCost", reflect.TypeOf((*MockIAPIService)(nil).GetSalaryCost), userID, salaryCostID, skipPrevious)
}

// GetSalaryCostLabel mocks base method.
func (m *MockIAPIService) GetSalaryCostLabel(userID, salaryCostLabelID int64) (*models.SalaryCostLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalaryCostLabel", userID, salaryCostLabelID)
	ret0, _ := ret[0].(*models.SalaryCostLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalaryCostLabel indicates an expected call of GetSalaryCostLabel.
func (mr *MockIAPIServiceMockRecorder) GetSalaryCostLabel(userID, salaryCostLabelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalaryCostLabel", reflect.TypeOf((*MockIAPIService)(nil).GetSalaryCostLabel), userID, salaryCostLabelID)
}

// GetTransaction mocks base method.
func (m *MockIAPIService) GetTransaction(userID, transactionID int64) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", userID, transactionID)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockIAPIServiceMockRecorder) GetTransaction(userID, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockIAPIService)(nil).GetTransaction), userID, transactionID)
}

// GetVat mocks base method.
func (m *MockIAPIService) GetVat(userID, vatID int64) (*models.Vat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVat", userID, vatID)
	ret0, _ := ret[0].(*models.Vat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVat indicates an expected call of GetVat.
func (mr *MockIAPIServiceMockRecorder) GetVat(userID, vatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVat", reflect.TypeOf((*MockIAPIService)(nil).GetVat), userID, vatID)
}

// ListBankAccounts mocks base method.
func (m *MockIAPIService) ListBankAccounts(userID int64) ([]models.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBankAccounts", userID)
	ret0, _ := ret[0].([]models.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBankAccounts indicates an expected call of ListBankAccounts.
func (mr *MockIAPIServiceMockRecorder) ListBankAccounts(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBankAccounts", reflect.TypeOf((*MockIAPIService)(nil).ListBankAccounts), userID)
}

// ListCategories mocks base method.
func (m *MockIAPIService) ListCategories(userID, page, limit int64) ([]models.Category, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", userID, page, limit)
	ret0, _ := ret[0].([]models.Category)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockIAPIServiceMockRecorder) ListCategories(userID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockIAPIService)(nil).ListCategories), userID, page, limit)
}

// ListCurrencies mocks base method.
func (m *MockIAPIService) ListCurrencies(userID int64) ([]models.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrencies", userID)
	ret0, _ := ret[0].([]models.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCurrencies indicates an expected call of ListCurrencies.
func (mr *MockIAPIServiceMockRecorder) ListCurrencies(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrencies", reflect.TypeOf((*MockIAPIService)(nil).ListCurrencies), userID)
}

// ListEmployees mocks base method.
func (m *MockIAPIService) ListEmployees(userID, page, limit int64, sortBy, sortOrder string) ([]models.Employee, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployees", userID, page, limit, sortBy, sortOrder)
	ret0, _ := ret[0].([]models.Employee)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEmployees indicates an expected call of ListEmployees.
func (mr *MockIAPIServiceMockRecorder) ListEmployees(userID, page, limit, sortBy, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployees", reflect.TypeOf((*MockIAPIService)(nil).ListEmployees), userID, page, limit, sortBy, sortOrder)
}

// ListFiatRates mocks base method.
func (m *MockIAPIService) ListFiatRates(base string) ([]models.FiatRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiatRates", base)
	ret0, _ := ret[0].([]models.FiatRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiatRates indicates an expected call of ListFiatRates.
func (mr *MockIAPIServiceMockRecorder) ListFiatRates(base any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiatRates", reflect.TypeOf((*MockIAPIService)(nil).ListFiatRates), base)
}

// ListForecastDetails mocks base method.
func (m *MockIAPIService) ListForecastDetails(userID, limit int64) ([]models.ForecastDatabaseDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForecastDetails", userID, limit)
	ret0, _ := ret[0].([]models.ForecastDatabaseDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForecastDetails indicates an expected call of ListForecastDetails.
func (mr *MockIAPIServiceMockRecorder) ListForecastDetails(userID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecastDetails", reflect.TypeOf((*MockIAPIService)(nil).ListForecastDetails), userID, limit)
}

// ListForecastExclusions mocks base method.
func (m *MockIAPIService) ListForecastExclusions(userID, relatedID int64, relatedTable string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForecastExclusions", userID, relatedID, relatedTable)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForecastExclusions indicates an expected call of ListForecastExclusions.
func (mr *MockIAPIServiceMockRecorder) ListForecastExclusions(userID, relatedID, relatedTable any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecastExclusions", reflect.TypeOf((*MockIAPIService)(nil).ListForecastExclusions), userID, relatedID, relatedTable)
}

// ListForecasts mocks base method.
func (m *MockIAPIService) ListForecasts(userID, limit int64) ([]models.Forecast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForecasts", userID, limit)
	ret0, _ := ret[0].([]models.Forecast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForecasts indicates an expected call of ListForecasts.
func (mr *MockIAPIServiceMockRecorder) ListForecasts(userID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecasts", reflect.TypeOf((*MockIAPIService)(nil).ListForecasts), userID, limit)
}

// ListOrganisations mocks base method.
func (m *MockIAPIService) ListOrganisations(userID, page, limit int64) ([]models.Organisation, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganisations", userID, page, limit)
	ret0, _ := ret[0].([]models.Organisation)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganisations indicates an expected call of ListOrganisations.
func (mr *MockIAPIServiceMockRecorder) ListOrganisations(userID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganisations", reflect.TypeOf((*MockIAPIService)(nil).ListOrganisations), userID, page, limit)
}

// ListSalaries mocks base method.
func (m *MockIAPIService) ListSalaries(userID, employeeID, page, limit int64) ([]models.Salary, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSalaries", userID, employeeID, page, limit)
	ret0, _ := ret[0].([]models.Salary)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSalaries indicates an expected call of ListSalaries.
func (mr *MockIAPIServiceMockRecorder) ListSalaries(userID, employeeID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSalaries", reflect.TypeOf((*MockIAPIService)(nil).ListSalaries), userID, employeeID, page, limit)
}

// ListSalaryCostLabels mocks base method.
func (m *MockIAPIService) ListSalaryCostLabels(userID, page, limit int64) ([]models.SalaryCostLabel, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSalaryCostLabels", userID, page, limit)
	ret0, _ := ret[0].([]models.SalaryCostLabel)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSalaryCostLabels indicates an expected call of ListSalaryCostLabels.
func (mr *MockIAPIServiceMockRecorder) ListSalaryCostLabels(userID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSalaryCostLabels", reflect.TypeOf((*MockIAPIService)(nil).ListSalaryCostLabels), userID, page, limit)
}

// ListSalaryCosts mocks base method.
func (m *MockIAPIService) ListSalaryCosts(userID, salaryID, page, limit int64, skipPrevious bool) ([]models.SalaryCost, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSalaryCosts", userID, salaryID, page, limit, skipPrevious)
	ret0, _ := ret[0].([]models.SalaryCost)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSalaryCosts indicates an expected call of ListSalaryCosts.
func (mr *MockIAPIServiceMockRecorder) ListSalaryCosts(userID, salaryID, page, limit, skipPrevious any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSalaryCosts", reflect.TypeOf((*MockIAPIService)(nil).ListSalaryCosts), userID, salaryID, page, limit, skipPrevious)
}

// ListTransactions mocks base method.
func (m *MockIAPIService) ListTransactions(userID, page, limit int64, sortBy, sortOrder string) ([]models.Transaction, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", userID, page, limit, sortBy, sortOrder)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockIAPIServiceMockRecorder) ListTransactions(userID, page, limit, sortBy, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockIAPIService)(nil).ListTransactions), userID, page, limit, sortBy, sortOrder)
}

// ListVats mocks base method.
func (m *MockIAPIService) ListVats(userID int64) ([]models.Vat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVats", userID)
	ret0, _ := ret[0].([]models.Vat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVats indicates an expected call of ListVats.
func (mr *MockIAPIServiceMockRecorder) ListVats(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVats", reflect.TypeOf((*MockIAPIService)(nil).ListVats), userID)
}

// Login mocks base method.
func (m *MockIAPIService) Login(payload models.Login, deviceName, existingRefreshToken string) (*models.User, *string, *time.Time, *string, *time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", payload, deviceName, existingRefreshToken)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(*time.Time)
	ret3, _ := ret[3].(*string)
	ret4, _ := ret[4].(*time.Time)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// Login indicates an expected call of Login.
func (mr *MockIAPIServiceMockRecorder) Login(payload, deviceName, existingRefreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIAPIService)(nil).Login), payload, deviceName, existingRefreshToken)
}

// Logout mocks base method.
func (m *MockIAPIService) Logout(existingRefreshToken string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", existingRefreshToken)
}

// Logout indicates an expected call of Logout.
func (mr *MockIAPIServiceMockRecorder) Logout(existingRefreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockIAPIService)(nil).Logout), existingRefreshToken)
}

// ResetPassword mocks base method.
func (m *MockIAPIService) ResetPassword(payload models.ResetPassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockIAPIServiceMockRecorder) ResetPassword(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockIAPIService)(nil).ResetPassword), payload)
}

// SetUserCurrentOrganisation mocks base method.
func (m *MockIAPIService) SetUserCurrentOrganisation(payload models.UpdateUserCurrentOrganisation, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserCurrentOrganisation", payload, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserCurrentOrganisation indicates an expected call of SetUserCurrentOrganisation.
func (mr *MockIAPIServiceMockRecorder) SetUserCurrentOrganisation(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserCurrentOrganisation", reflect.TypeOf((*MockIAPIService)(nil).SetUserCurrentOrganisation), payload, userID)
}

// UpdateBankAccount mocks base method.
func (m *MockIAPIService) UpdateBankAccount(payload models.UpdateBankAccount, userID, bankAccountID int64) (*models.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBankAccount", payload, userID, bankAccountID)
	ret0, _ := ret[0].(*models.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBankAccount indicates an expected call of UpdateBankAccount.
func (mr *MockIAPIServiceMockRecorder) UpdateBankAccount(payload, userID, bankAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBankAccount", reflect.TypeOf((*MockIAPIService)(nil).UpdateBankAccount), payload, userID, bankAccountID)
}

// UpdateCategory mocks base method.
func (m *MockIAPIService) UpdateCategory(payload models.UpdateCategory, userID, categoryID int64) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", payload, userID, categoryID)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockIAPIServiceMockRecorder) UpdateCategory(payload, userID, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockIAPIService)(nil).UpdateCategory), payload, userID, categoryID)
}

// UpdateCurrency mocks base method.
func (m *MockIAPIService) UpdateCurrency(payload models.UpdateCurrency, currencyID int64) (*models.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrency", payload, currencyID)
	ret0, _ := ret[0].(*models.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCurrency indicates an expected call of UpdateCurrency.
func (mr *MockIAPIServiceMockRecorder) UpdateCurrency(payload, currencyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrency", reflect.TypeOf((*MockIAPIService)(nil).UpdateCurrency), payload, currencyID)
}

// UpdateEmployee mocks base method.
func (m *MockIAPIService) UpdateEmployee(payload models.UpdateEmployee, userID, employeeID int64) (*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployee", payload, userID, employeeID)
	ret0, _ := ret[0].(*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployee indicates an expected call of UpdateEmployee.
func (mr *MockIAPIServiceMockRecorder) UpdateEmployee(payload, userID, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockIAPIService)(nil).UpdateEmployee), payload, userID, employeeID)
}

// UpdateForecastExclusions mocks base method.
func (m *MockIAPIService) UpdateForecastExclusions(payload models.UpdateForecastExclusions, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateForecastExclusions", payload, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateForecastExclusions indicates an expected call of UpdateForecastExclusions.
func (mr *MockIAPIServiceMockRecorder) UpdateForecastExclusions(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateForecastExclusions", reflect.TypeOf((*MockIAPIService)(nil).UpdateForecastExclusions), payload, userID)
}

// UpdateOrganisation mocks base method.
func (m *MockIAPIService) UpdateOrganisation(payload models.UpdateOrganisation, userID, organisationID int64) (*models.Organisation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganisation", payload, userID, organisationID)
	ret0, _ := ret[0].(*models.Organisation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganisation indicates an expected call of UpdateOrganisation.
func (mr *MockIAPIServiceMockRecorder) UpdateOrganisation(payload, userID, organisationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganisation", reflect.TypeOf((*MockIAPIService)(nil).UpdateOrganisation), payload, userID, organisationID)
}

// UpdatePassword mocks base method.
func (m *MockIAPIService) UpdatePassword(payload models.UpdateUserPassword, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", payload, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockIAPIServiceMockRecorder) UpdatePassword(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockIAPIService)(nil).UpdatePassword), payload, userID)
}

// UpdateProfile mocks base method.
func (m *MockIAPIService) UpdateProfile(payload models.UpdateUser, userID int64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", payload, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockIAPIServiceMockRecorder) UpdateProfile(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockIAPIService)(nil).UpdateProfile), payload, userID)
}

// UpdateSalary mocks base method.
func (m *MockIAPIService) UpdateSalary(payload models.UpdateSalary, userID, salaryID int64) (*models.Salary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSalary", payload, userID, salaryID)
	ret0, _ := ret[0].(*models.Salary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSalary indicates an expected call of UpdateSalary.
func (mr *MockIAPIServiceMockRecorder) UpdateSalary(payload, userID, salaryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSalary", reflect.TypeOf((*MockIAPIService)(nil).UpdateSalary), payload, userID, salaryID)
}

// UpdateSalaryCost mocks base method.
func (m *MockIAPIService) UpdateSalaryCost(payload models.CreateSalaryCost, userID, salaryCostID int64) (*models.SalaryCost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSalaryCost", payload, userID, salaryCostID)
	ret0, _ := ret[0].(*models.SalaryCost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSalaryCost indicates an expected call of UpdateSalaryCost.
func (mr *MockIAPIServiceMockRecorder) UpdateSalaryCost(payload, userID, salaryCostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSalaryCost", reflect.TypeOf((*MockIAPIService)(nil).UpdateSalaryCost), payload, userID, salaryCostID)
}

// UpdateSalaryCostLabel mocks base method.
func (m *MockIAPIService) UpdateSalaryCostLabel(payload models.CreateSalaryCostLabel, userID, salaryCostLabelID int64) (*models.SalaryCostLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSalaryCostLabel", payload, userID, salaryCostLabelID)
	ret0, _ := ret[0].(*models.SalaryCostLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSalaryCostLabel indicates an expected call of UpdateSalaryCostLabel.
func (mr *MockIAPIServiceMockRecorder) UpdateSalaryCostLabel(payload, userID, salaryCostLabelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSalaryCostLabel", reflect.TypeOf((*MockIAPIService)(nil).UpdateSalaryCostLabel), payload, userID, salaryCostLabelID)
}

// UpdateTransaction mocks base method.
func (m *MockIAPIService) UpdateTransaction(payload models.UpdateTransaction, userID, transactionID int64) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", payload, userID, transactionID)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockIAPIServiceMockRecorder) UpdateTransaction(payload, userID, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockIAPIService)(nil).UpdateTransaction), payload, userID, transactionID)
}

// UpdateVat mocks base method.
func (m *MockIAPIService) UpdateVat(payload models.UpdateVat, userID, vatID int64) (*models.Vat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVat", payload, userID, vatID)
	ret0, _ := ret[0].(*models.Vat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVat indicates an expected call of UpdateVat.
func (mr *MockIAPIServiceMockRecorder) UpdateVat(payload, userID, vatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVat", reflect.TypeOf((*MockIAPIService)(nil).UpdateVat), payload, userID, vatID)
}

// UpsertFiatRate mocks base method.
func (m *MockIAPIService) UpsertFiatRate(payload models.CreateFiatRate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertFiatRate", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertFiatRate indicates an expected call of UpsertFiatRate.
func (mr *MockIAPIServiceMockRecorder) UpsertFiatRate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertFiatRate", reflect.TypeOf((*MockIAPIService)(nil).UpsertFiatRate), payload)
}
