// Code generated by MockGen. DO NOT EDIT.
// Source: liquiswiss/internal/service (interfaces: IDatabaseService)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination ../mocks/db_service.go liquiswiss/internal/service IDatabaseService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "liquiswiss/pkg/models"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockIDatabaseService is a mock of IDatabaseService interface.
type MockIDatabaseService struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseServiceMockRecorder
}

// MockIDatabaseServiceMockRecorder is the mock recorder for MockIDatabaseService.
type MockIDatabaseServiceMockRecorder struct {
	mock *MockIDatabaseService
}

// NewMockIDatabaseService creates a new mock instance.
func NewMockIDatabaseService(ctrl *gomock.Controller) *MockIDatabaseService {
	mock := &MockIDatabaseService{ctrl: ctrl}
	mock.recorder = &MockIDatabaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatabaseService) EXPECT() *MockIDatabaseServiceMockRecorder {
	return m.recorder
}

// AssignUserToOrganisation mocks base method.
func (m *MockIDatabaseService) AssignUserToOrganisation(arg0, arg1 int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignUserToOrganisation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignUserToOrganisation indicates an expected call of AssignUserToOrganisation.
func (mr *MockIDatabaseServiceMockRecorder) AssignUserToOrganisation(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUserToOrganisation", reflect.TypeOf((*MockIDatabaseService)(nil).AssignUserToOrganisation), arg0, arg1, arg2)
}

// CheckRefreshToken mocks base method.
func (m *MockIDatabaseService) CheckRefreshToken(arg0 string, arg1 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRefreshToken indicates an expected call of CheckRefreshToken.
func (mr *MockIDatabaseServiceMockRecorder) CheckRefreshToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRefreshToken", reflect.TypeOf((*MockIDatabaseService)(nil).CheckRefreshToken), arg0, arg1)
}

// CheckUserExistance mocks base method.
func (m *MockIDatabaseService) CheckUserExistance(arg0 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistance", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExistance indicates an expected call of CheckUserExistance.
func (mr *MockIDatabaseServiceMockRecorder) CheckUserExistance(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistance", reflect.TypeOf((*MockIDatabaseService)(nil).CheckUserExistance), arg0)
}

// CreateCategory mocks base method.
func (m *MockIDatabaseService) CreateCategory(arg0 models.CreateCategory) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockIDatabaseServiceMockRecorder) CreateCategory(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockIDatabaseService)(nil).CreateCategory), arg0)
}

// CreateCurrency mocks base method.
func (m *MockIDatabaseService) CreateCurrency(arg0 models.CreateCurrency) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCurrency", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCurrency indicates an expected call of CreateCurrency.
func (mr *MockIDatabaseServiceMockRecorder) CreateCurrency(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCurrency", reflect.TypeOf((*MockIDatabaseService)(nil).CreateCurrency), arg0)
}

// CreateEmployee mocks base method.
func (m *MockIDatabaseService) CreateEmployee(arg0 models.CreateEmployee, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockIDatabaseServiceMockRecorder) CreateEmployee(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockIDatabaseService)(nil).CreateEmployee), arg0, arg1)
}

// CreateOrganisation mocks base method.
func (m *MockIDatabaseService) CreateOrganisation(arg0 string, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganisation", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganisation indicates an expected call of CreateOrganisation.
func (mr *MockIDatabaseServiceMockRecorder) CreateOrganisation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganisation", reflect.TypeOf((*MockIDatabaseService)(nil).CreateOrganisation), arg0, arg1)
}

// CreateTransaction mocks base method.
func (m *MockIDatabaseService) CreateTransaction(arg0 models.CreateTransaction, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockIDatabaseServiceMockRecorder) CreateTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockIDatabaseService)(nil).CreateTransaction), arg0, arg1)
}

// DeleteRefreshToken mocks base method.
func (m *MockIDatabaseService) DeleteRefreshToken(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockIDatabaseServiceMockRecorder) DeleteRefreshToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockIDatabaseService)(nil).DeleteRefreshToken), arg0, arg1)
}

// GetCategory mocks base method.
func (m *MockIDatabaseService) GetCategory(arg0 string) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", arg0)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockIDatabaseServiceMockRecorder) GetCategory(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockIDatabaseService)(nil).GetCategory), arg0)
}

// GetCurrency mocks base method.
func (m *MockIDatabaseService) GetCurrency(arg0 string) (*models.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency", arg0)
	ret0, _ := ret[0].(*models.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockIDatabaseServiceMockRecorder) GetCurrency(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockIDatabaseService)(nil).GetCurrency), arg0)
}

// GetEmployee mocks base method.
func (m *MockIDatabaseService) GetEmployee(arg0 int64, arg1 string) (*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployee", arg0, arg1)
	ret0, _ := ret[0].(*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployee indicates an expected call of GetEmployee.
func (mr *MockIDatabaseServiceMockRecorder) GetEmployee(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployee", reflect.TypeOf((*MockIDatabaseService)(nil).GetEmployee), arg0, arg1)
}

// GetOrganisation mocks base method.
func (m *MockIDatabaseService) GetOrganisation(arg0 int64, arg1 string) (*models.Organisation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganisation", arg0, arg1)
	ret0, _ := ret[0].(*models.Organisation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganisation indicates an expected call of GetOrganisation.
func (mr *MockIDatabaseServiceMockRecorder) GetOrganisation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganisation", reflect.TypeOf((*MockIDatabaseService)(nil).GetOrganisation), arg0, arg1)
}

// GetProfile mocks base method.
func (m *MockIDatabaseService) GetProfile(arg0 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockIDatabaseServiceMockRecorder) GetProfile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockIDatabaseService)(nil).GetProfile), arg0)
}

// GetTransaction mocks base method.
func (m *MockIDatabaseService) GetTransaction(arg0 int64, arg1 string) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockIDatabaseServiceMockRecorder) GetTransaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockIDatabaseService)(nil).GetTransaction), arg0, arg1)
}

// GetUserPasswordByEMail mocks base method.
func (m *MockIDatabaseService) GetUserPasswordByEMail(arg0 string) (*models.Login, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPasswordByEMail", arg0)
	ret0, _ := ret[0].(*models.Login)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPasswordByEMail indicates an expected call of GetUserPasswordByEMail.
func (mr *MockIDatabaseServiceMockRecorder) GetUserPasswordByEMail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPasswordByEMail", reflect.TypeOf((*MockIDatabaseService)(nil).GetUserPasswordByEMail), arg0)
}

// ListCategories mocks base method.
func (m *MockIDatabaseService) ListCategories(arg0, arg1 int64) ([]models.Category, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", arg0, arg1)
	ret0, _ := ret[0].([]models.Category)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockIDatabaseServiceMockRecorder) ListCategories(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockIDatabaseService)(nil).ListCategories), arg0, arg1)
}

// ListCurrencies mocks base method.
func (m *MockIDatabaseService) ListCurrencies(arg0, arg1 int64) ([]models.Currency, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrencies", arg0, arg1)
	ret0, _ := ret[0].([]models.Currency)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCurrencies indicates an expected call of ListCurrencies.
func (mr *MockIDatabaseServiceMockRecorder) ListCurrencies(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrencies", reflect.TypeOf((*MockIDatabaseService)(nil).ListCurrencies), arg0, arg1)
}

// ListEmployees mocks base method.
func (m *MockIDatabaseService) ListEmployees(arg0, arg1, arg2 int64) ([]models.Employee, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployees", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Employee)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEmployees indicates an expected call of ListEmployees.
func (mr *MockIDatabaseServiceMockRecorder) ListEmployees(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployees", reflect.TypeOf((*MockIDatabaseService)(nil).ListEmployees), arg0, arg1, arg2)
}

// ListOrganisations mocks base method.
func (m *MockIDatabaseService) ListOrganisations(arg0, arg1, arg2 int64) ([]models.Organisation, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganisations", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Organisation)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganisations indicates an expected call of ListOrganisations.
func (mr *MockIDatabaseServiceMockRecorder) ListOrganisations(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganisations", reflect.TypeOf((*MockIDatabaseService)(nil).ListOrganisations), arg0, arg1, arg2)
}

// ListTransactions mocks base method.
func (m *MockIDatabaseService) ListTransactions(arg0, arg1, arg2 int64) ([]models.Transaction, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockIDatabaseServiceMockRecorder) ListTransactions(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockIDatabaseService)(nil).ListTransactions), arg0, arg1, arg2)
}

// RegisterUser mocks base method.
func (m *MockIDatabaseService) RegisterUser(arg0, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockIDatabaseServiceMockRecorder) RegisterUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockIDatabaseService)(nil).RegisterUser), arg0, arg1)
}

// StoreRefreshTokenID mocks base method.
func (m *MockIDatabaseService) StoreRefreshTokenID(arg0 int64, arg1 string, arg2 time.Time, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRefreshTokenID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRefreshTokenID indicates an expected call of StoreRefreshTokenID.
func (mr *MockIDatabaseServiceMockRecorder) StoreRefreshTokenID(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRefreshTokenID", reflect.TypeOf((*MockIDatabaseService)(nil).StoreRefreshTokenID), arg0, arg1, arg2, arg3)
}

// UpdateCategory mocks base method.
func (m *MockIDatabaseService) UpdateCategory(arg0 models.UpdateCategory, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockIDatabaseServiceMockRecorder) UpdateCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateCategory), arg0, arg1)
}

// UpdateCurrency mocks base method.
func (m *MockIDatabaseService) UpdateCurrency(arg0 models.UpdateCurrency, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrency", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCurrency indicates an expected call of UpdateCurrency.
func (mr *MockIDatabaseServiceMockRecorder) UpdateCurrency(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrency", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateCurrency), arg0, arg1)
}

// UpdateEmployee mocks base method.
func (m *MockIDatabaseService) UpdateEmployee(arg0 models.UpdateEmployee, arg1 int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployee", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployee indicates an expected call of UpdateEmployee.
func (mr *MockIDatabaseServiceMockRecorder) UpdateEmployee(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateEmployee), arg0, arg1, arg2)
}

// UpdateOrganisation mocks base method.
func (m *MockIDatabaseService) UpdateOrganisation(arg0 models.UpdateOrganisation, arg1 int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganisation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganisation indicates an expected call of UpdateOrganisation.
func (mr *MockIDatabaseServiceMockRecorder) UpdateOrganisation(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganisation", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateOrganisation), arg0, arg1, arg2)
}

// UpdateTransaction mocks base method.
func (m *MockIDatabaseService) UpdateTransaction(arg0 models.UpdateTransaction, arg1 int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockIDatabaseServiceMockRecorder) UpdateTransaction(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateTransaction), arg0, arg1, arg2)
}
