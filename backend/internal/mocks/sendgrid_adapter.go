// Code generated by MockGen. DO NOT EDIT.
// Source: liquiswiss/internal/adapter/sendgrid_adapter (interfaces: ISendgridAdapter)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination ../../mocks/sendgrid_adapter.go liquiswiss/internal/adapter/sendgrid_adapter ISendgridAdapter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	mail "github.com/sendgrid/sendgrid-go/helpers/mail"
	gomock "go.uber.org/mock/gomock"
)

// MockISendgridAdapter is a mock of ISendgridAdapter interface.
type MockISendgridAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockISendgridAdapterMockRecorder
	isgomock struct{}
}

// MockISendgridAdapterMockRecorder is the mock recorder for MockISendgridAdapter.
type MockISendgridAdapterMockRecorder struct {
	mock *MockISendgridAdapter
}

// NewMockISendgridAdapter creates a new mock instance.
func NewMockISendgridAdapter(ctrl *gomock.Controller) *MockISendgridAdapter {
	mock := &MockISendgridAdapter{ctrl: ctrl}
	mock.recorder = &MockISendgridAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISendgridAdapter) EXPECT() *MockISendgridAdapterMockRecorder {
	return m.recorder
}

// SendMail mocks base method.
func (m *MockISendgridAdapter) SendMail(from, to *mail.Email, templateId string, dynamicTemplateData any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", from, to, templateId, dynamicTemplateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMail indicates an expected call of SendMail.
func (mr *MockISendgridAdapterMockRecorder) SendMail(from, to, templateId, dynamicTemplateData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockISendgridAdapter)(nil).SendMail), from, to, templateId, dynamicTemplateData)
}

// SendPasswordResetMail mocks base method.
func (m *MockISendgridAdapter) SendPasswordResetMail(email, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPasswordResetMail", email, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPasswordResetMail indicates an expected call of SendPasswordResetMail.
func (mr *MockISendgridAdapterMockRecorder) SendPasswordResetMail(email, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordResetMail", reflect.TypeOf((*MockISendgridAdapter)(nil).SendPasswordResetMail), email, code)
}

// SendRegistrationMail mocks base method.
func (m *MockISendgridAdapter) SendRegistrationMail(email, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRegistrationMail", email, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRegistrationMail indicates an expected call of SendRegistrationMail.
func (mr *MockISendgridAdapterMockRecorder) SendRegistrationMail(email, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRegistrationMail", reflect.TypeOf((*MockISendgridAdapter)(nil).SendRegistrationMail), email, code)
}
