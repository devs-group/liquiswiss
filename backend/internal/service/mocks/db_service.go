// Code generated by MockGen. DO NOT EDIT.
// Source: liquiswiss/internal/service/db_service (interfaces: IDatabaseService)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination ../mocks/db_service.go liquiswiss/internal/service/db_service IDatabaseService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "liquiswiss/pkg/models"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockIDatabaseService is a mock of IDatabaseService interface.
type MockIDatabaseService struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseServiceMockRecorder
	isgomock struct{}
}

// MockIDatabaseServiceMockRecorder is the mock recorder for MockIDatabaseService.
type MockIDatabaseServiceMockRecorder struct {
	mock *MockIDatabaseService
}

// NewMockIDatabaseService creates a new mock instance.
func NewMockIDatabaseService(ctrl *gomock.Controller) *MockIDatabaseService {
	mock := &MockIDatabaseService{ctrl: ctrl}
	mock.recorder = &MockIDatabaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatabaseService) EXPECT() *MockIDatabaseServiceMockRecorder {
	return m.recorder
}

// AssignUserToOrganisation mocks base method.
func (m *MockIDatabaseService) AssignUserToOrganisation(userID, organisationID int64, role string, isDefault bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignUserToOrganisation", userID, organisationID, role, isDefault)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignUserToOrganisation indicates an expected call of AssignUserToOrganisation.
func (mr *MockIDatabaseServiceMockRecorder) AssignUserToOrganisation(userID, organisationID, role, isDefault any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUserToOrganisation", reflect.TypeOf((*MockIDatabaseService)(nil).AssignUserToOrganisation), userID, organisationID, role, isDefault)
}

// CalculateSalaryCostDetails mocks base method.
func (m *MockIDatabaseService) CalculateSalaryCostDetails(salaryCostID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateSalaryCostDetails", salaryCostID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateSalaryCostDetails indicates an expected call of CalculateSalaryCostDetails.
func (mr *MockIDatabaseServiceMockRecorder) CalculateSalaryCostDetails(salaryCostID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateSalaryCostDetails", reflect.TypeOf((*MockIDatabaseService)(nil).CalculateSalaryCostDetails), salaryCostID, userID)
}

// CheckRefreshToken mocks base method.
func (m *MockIDatabaseService) CheckRefreshToken(tokenID string, userID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRefreshToken", tokenID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRefreshToken indicates an expected call of CheckRefreshToken.
func (mr *MockIDatabaseServiceMockRecorder) CheckRefreshToken(tokenID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRefreshToken", reflect.TypeOf((*MockIDatabaseService)(nil).CheckRefreshToken), tokenID, userID)
}

// CheckUserExistence mocks base method.
func (m *MockIDatabaseService) CheckUserExistence(id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExistence", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExistence indicates an expected call of CheckUserExistence.
func (mr *MockIDatabaseServiceMockRecorder) CheckUserExistence(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExistence", reflect.TypeOf((*MockIDatabaseService)(nil).CheckUserExistence), id)
}

// ClearForecasts mocks base method.
func (m *MockIDatabaseService) ClearForecasts(userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearForecasts", userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearForecasts indicates an expected call of ClearForecasts.
func (mr *MockIDatabaseServiceMockRecorder) ClearForecasts(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearForecasts", reflect.TypeOf((*MockIDatabaseService)(nil).ClearForecasts), userID)
}

// CopySalaryCosts mocks base method.
func (m *MockIDatabaseService) CopySalaryCosts(payload models.CopySalaryCosts, userID, salaryID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopySalaryCosts", payload, userID, salaryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopySalaryCosts indicates an expected call of CopySalaryCosts.
func (mr *MockIDatabaseServiceMockRecorder) CopySalaryCosts(payload, userID, salaryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopySalaryCosts", reflect.TypeOf((*MockIDatabaseService)(nil).CopySalaryCosts), payload, userID, salaryID)
}

// CountCurrencies mocks base method.
func (m *MockIDatabaseService) CountCurrencies() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCurrencies")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCurrencies indicates an expected call of CountCurrencies.
func (mr *MockIDatabaseServiceMockRecorder) CountCurrencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCurrencies", reflect.TypeOf((*MockIDatabaseService)(nil).CountCurrencies))
}

// CountEmployees mocks base method.
func (m *MockIDatabaseService) CountEmployees(userID, page, limit int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEmployees", userID, page, limit)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEmployees indicates an expected call of CountEmployees.
func (mr *MockIDatabaseServiceMockRecorder) CountEmployees(userID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEmployees", reflect.TypeOf((*MockIDatabaseService)(nil).CountEmployees), userID, page, limit)
}

// CountUniqueCurrenciesInFiatRates mocks base method.
func (m *MockIDatabaseService) CountUniqueCurrenciesInFiatRates() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUniqueCurrenciesInFiatRates")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUniqueCurrenciesInFiatRates indicates an expected call of CountUniqueCurrenciesInFiatRates.
func (mr *MockIDatabaseServiceMockRecorder) CountUniqueCurrenciesInFiatRates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUniqueCurrenciesInFiatRates", reflect.TypeOf((*MockIDatabaseService)(nil).CountUniqueCurrenciesInFiatRates))
}

// CreateBankAccount mocks base method.
func (m *MockIDatabaseService) CreateBankAccount(payload models.CreateBankAccount, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBankAccount", payload, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBankAccount indicates an expected call of CreateBankAccount.
func (mr *MockIDatabaseServiceMockRecorder) CreateBankAccount(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBankAccount", reflect.TypeOf((*MockIDatabaseService)(nil).CreateBankAccount), payload, userID)
}

// CreateCategory mocks base method.
func (m *MockIDatabaseService) CreateCategory(userID *int64, payload models.CreateCategory) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", userID, payload)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockIDatabaseServiceMockRecorder) CreateCategory(userID, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockIDatabaseService)(nil).CreateCategory), userID, payload)
}

// CreateCurrency mocks base method.
func (m *MockIDatabaseService) CreateCurrency(payload models.CreateCurrency) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCurrency", payload)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCurrency indicates an expected call of CreateCurrency.
func (mr *MockIDatabaseServiceMockRecorder) CreateCurrency(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCurrency", reflect.TypeOf((*MockIDatabaseService)(nil).CreateCurrency), payload)
}

// CreateEmployee mocks base method.
func (m *MockIDatabaseService) CreateEmployee(payload models.CreateEmployee, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", payload, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockIDatabaseServiceMockRecorder) CreateEmployee(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockIDatabaseService)(nil).CreateEmployee), payload, userID)
}

// CreateForecastExclusion mocks base method.
func (m *MockIDatabaseService) CreateForecastExclusion(payload models.CreateForecastExclusion, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForecastExclusion", payload, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateForecastExclusion indicates an expected call of CreateForecastExclusion.
func (mr *MockIDatabaseServiceMockRecorder) CreateForecastExclusion(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForecastExclusion", reflect.TypeOf((*MockIDatabaseService)(nil).CreateForecastExclusion), payload, userID)
}

// CreateOrganisation mocks base method.
func (m *MockIDatabaseService) CreateOrganisation(name string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganisation", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganisation indicates an expected call of CreateOrganisation.
func (mr *MockIDatabaseServiceMockRecorder) CreateOrganisation(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganisation", reflect.TypeOf((*MockIDatabaseService)(nil).CreateOrganisation), name)
}

// CreateRegistration mocks base method.
func (m *MockIDatabaseService) CreateRegistration(email, code string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistration", email, code)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistration indicates an expected call of CreateRegistration.
func (mr *MockIDatabaseServiceMockRecorder) CreateRegistration(email, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistration", reflect.TypeOf((*MockIDatabaseService)(nil).CreateRegistration), email, code)
}

// CreateResetPassword mocks base method.
func (m *MockIDatabaseService) CreateResetPassword(email, code string, delay time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResetPassword", email, code, delay)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResetPassword indicates an expected call of CreateResetPassword.
func (mr *MockIDatabaseServiceMockRecorder) CreateResetPassword(email, code, delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResetPassword", reflect.TypeOf((*MockIDatabaseService)(nil).CreateResetPassword), email, code, delay)
}

// CreateSalary mocks base method.
func (m *MockIDatabaseService) CreateSalary(payload models.CreateSalary, userID, employeeID int64) (int64, *int64, *int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSalary", payload, userID, employeeID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(*int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateSalary indicates an expected call of CreateSalary.
func (mr *MockIDatabaseServiceMockRecorder) CreateSalary(payload, userID, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSalary", reflect.TypeOf((*MockIDatabaseService)(nil).CreateSalary), payload, userID, employeeID)
}

// CreateSalaryCost mocks base method.
func (m *MockIDatabaseService) CreateSalaryCost(payload models.CreateSalaryCost, userID, salaryID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSalaryCost", payload, userID, salaryID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSalaryCost indicates an expected call of CreateSalaryCost.
func (mr *MockIDatabaseServiceMockRecorder) CreateSalaryCost(payload, userID, salaryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSalaryCost", reflect.TypeOf((*MockIDatabaseService)(nil).CreateSalaryCost), payload, userID, salaryID)
}

// CreateSalaryCostLabel mocks base method.
func (m *MockIDatabaseService) CreateSalaryCostLabel(payload models.CreateSalaryCostLabel, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSalaryCostLabel", payload, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSalaryCostLabel indicates an expected call of CreateSalaryCostLabel.
func (mr *MockIDatabaseServiceMockRecorder) CreateSalaryCostLabel(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSalaryCostLabel", reflect.TypeOf((*MockIDatabaseService)(nil).CreateSalaryCostLabel), payload, userID)
}

// CreateTransaction mocks base method.
func (m *MockIDatabaseService) CreateTransaction(payload models.CreateTransaction, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", payload, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockIDatabaseServiceMockRecorder) CreateTransaction(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockIDatabaseService)(nil).CreateTransaction), payload, userID)
}

// CreateUser mocks base method.
func (m *MockIDatabaseService) CreateUser(email, password string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", email, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIDatabaseServiceMockRecorder) CreateUser(email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIDatabaseService)(nil).CreateUser), email, password)
}

// CreateVat mocks base method.
func (m *MockIDatabaseService) CreateVat(payload models.CreateVat, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVat", payload, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVat indicates an expected call of CreateVat.
func (mr *MockIDatabaseServiceMockRecorder) CreateVat(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVat", reflect.TypeOf((*MockIDatabaseService)(nil).CreateVat), payload, userID)
}

// DeleteBankAccount mocks base method.
func (m *MockIDatabaseService) DeleteBankAccount(userID, bankAccountID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBankAccount", userID, bankAccountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBankAccount indicates an expected call of DeleteBankAccount.
func (mr *MockIDatabaseServiceMockRecorder) DeleteBankAccount(userID, bankAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBankAccount", reflect.TypeOf((*MockIDatabaseService)(nil).DeleteBankAccount), userID, bankAccountID)
}

// DeleteEmployee mocks base method.
func (m *MockIDatabaseService) DeleteEmployee(employeeID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployee", employeeID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployee indicates an expected call of DeleteEmployee.
func (mr *MockIDatabaseServiceMockRecorder) DeleteEmployee(employeeID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockIDatabaseService)(nil).DeleteEmployee), employeeID, userID)
}

// DeleteForecastExclusion mocks base method.
func (m *MockIDatabaseService) DeleteForecastExclusion(payload models.CreateForecastExclusion, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForecastExclusion", payload, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteForecastExclusion indicates an expected call of DeleteForecastExclusion.
func (mr *MockIDatabaseServiceMockRecorder) DeleteForecastExclusion(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForecastExclusion", reflect.TypeOf((*MockIDatabaseService)(nil).DeleteForecastExclusion), payload, userID)
}

// DeleteRefreshToken mocks base method.
func (m *MockIDatabaseService) DeleteRefreshToken(tokenID string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", tokenID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockIDatabaseServiceMockRecorder) DeleteRefreshToken(tokenID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockIDatabaseService)(nil).DeleteRefreshToken), tokenID, userID)
}

// DeleteRegistration mocks base method.
func (m *MockIDatabaseService) DeleteRegistration(registrationID int64, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistration", registrationID, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRegistration indicates an expected call of DeleteRegistration.
func (mr *MockIDatabaseServiceMockRecorder) DeleteRegistration(registrationID, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistration", reflect.TypeOf((*MockIDatabaseService)(nil).DeleteRegistration), registrationID, email)
}

// DeleteResetPassword mocks base method.
func (m *MockIDatabaseService) DeleteResetPassword(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResetPassword", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResetPassword indicates an expected call of DeleteResetPassword.
func (mr *MockIDatabaseServiceMockRecorder) DeleteResetPassword(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResetPassword", reflect.TypeOf((*MockIDatabaseService)(nil).DeleteResetPassword), email)
}

// DeleteSalary mocks base method.
func (m *MockIDatabaseService) DeleteSalary(existingSalary *models.Salary, userID int64) (*int64, *int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSalary", existingSalary, userID)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteSalary indicates an expected call of DeleteSalary.
func (mr *MockIDatabaseServiceMockRecorder) DeleteSalary(existingSalary, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSalary", reflect.TypeOf((*MockIDatabaseService)(nil).DeleteSalary), existingSalary, userID)
}

// DeleteSalaryCost mocks base method.
func (m *MockIDatabaseService) DeleteSalaryCost(salaryCostID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSalaryCost", salaryCostID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSalaryCost indicates an expected call of DeleteSalaryCost.
func (mr *MockIDatabaseServiceMockRecorder) DeleteSalaryCost(salaryCostID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSalaryCost", reflect.TypeOf((*MockIDatabaseService)(nil).DeleteSalaryCost), salaryCostID, userID)
}

// DeleteSalaryCostLabel mocks base method.
func (m *MockIDatabaseService) DeleteSalaryCostLabel(salaryCostLabelID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSalaryCostLabel", salaryCostLabelID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSalaryCostLabel indicates an expected call of DeleteSalaryCostLabel.
func (mr *MockIDatabaseServiceMockRecorder) DeleteSalaryCostLabel(salaryCostLabelID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSalaryCostLabel", reflect.TypeOf((*MockIDatabaseService)(nil).DeleteSalaryCostLabel), salaryCostLabelID, userID)
}

// DeleteTransaction mocks base method.
func (m *MockIDatabaseService) DeleteTransaction(userID, transactionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", userID, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockIDatabaseServiceMockRecorder) DeleteTransaction(userID, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockIDatabaseService)(nil).DeleteTransaction), userID, transactionID)
}

// DeleteVat mocks base method.
func (m *MockIDatabaseService) DeleteVat(userID, vatID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVat", userID, vatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVat indicates an expected call of DeleteVat.
func (mr *MockIDatabaseServiceMockRecorder) DeleteVat(userID, vatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVat", reflect.TypeOf((*MockIDatabaseService)(nil).DeleteVat), userID, vatID)
}

// GetBankAccount mocks base method.
func (m *MockIDatabaseService) GetBankAccount(userID, bankAccountID int64) (*models.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccount", userID, bankAccountID)
	ret0, _ := ret[0].(*models.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccount indicates an expected call of GetBankAccount.
func (mr *MockIDatabaseServiceMockRecorder) GetBankAccount(userID, bankAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccount", reflect.TypeOf((*MockIDatabaseService)(nil).GetBankAccount), userID, bankAccountID)
}

// GetCategory mocks base method.
func (m *MockIDatabaseService) GetCategory(userID, categoryID int64) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", userID, categoryID)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockIDatabaseServiceMockRecorder) GetCategory(userID, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockIDatabaseService)(nil).GetCategory), userID, categoryID)
}

// GetCurrency mocks base method.
func (m *MockIDatabaseService) GetCurrency(currencyID int64) (*models.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrency", currencyID)
	ret0, _ := ret[0].(*models.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrency indicates an expected call of GetCurrency.
func (mr *MockIDatabaseServiceMockRecorder) GetCurrency(currencyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrency", reflect.TypeOf((*MockIDatabaseService)(nil).GetCurrency), currencyID)
}

// GetEmployee mocks base method.
func (m *MockIDatabaseService) GetEmployee(userID, employeeID int64) (*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployee", userID, employeeID)
	ret0, _ := ret[0].(*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployee indicates an expected call of GetEmployee.
func (mr *MockIDatabaseServiceMockRecorder) GetEmployee(userID, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployee", reflect.TypeOf((*MockIDatabaseService)(nil).GetEmployee), userID, employeeID)
}

// GetFiatRate mocks base method.
func (m *MockIDatabaseService) GetFiatRate(base, target string) (*models.FiatRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiatRate", base, target)
	ret0, _ := ret[0].(*models.FiatRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiatRate indicates an expected call of GetFiatRate.
func (mr *MockIDatabaseServiceMockRecorder) GetFiatRate(base, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiatRate", reflect.TypeOf((*MockIDatabaseService)(nil).GetFiatRate), base, target)
}

// GetOrganisation mocks base method.
func (m *MockIDatabaseService) GetOrganisation(userID, organisationID int64) (*models.Organisation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganisation", userID, organisationID)
	ret0, _ := ret[0].(*models.Organisation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganisation indicates an expected call of GetOrganisation.
func (mr *MockIDatabaseServiceMockRecorder) GetOrganisation(userID, organisationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganisation", reflect.TypeOf((*MockIDatabaseService)(nil).GetOrganisation), userID, organisationID)
}

// GetProfile mocks base method.
func (m *MockIDatabaseService) GetProfile(userID int64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockIDatabaseServiceMockRecorder) GetProfile(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockIDatabaseService)(nil).GetProfile), userID)
}

// GetSalary mocks base method.
func (m *MockIDatabaseService) GetSalary(userID, salaryID int64) (*models.Salary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalary", userID, salaryID)
	ret0, _ := ret[0].(*models.Salary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalary indicates an expected call of GetSalary.
func (mr *MockIDatabaseServiceMockRecorder) GetSalary(userID, salaryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalary", reflect.TypeOf((*MockIDatabaseService)(nil).GetSalary), userID, salaryID)
}

// GetSalaryCost mocks base method.
func (m *MockIDatabaseService) GetSalaryCost(userID, salaryCostID int64) (*models.SalaryCost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalaryCost", userID, salaryCostID)
	ret0, _ := ret[0].(*models.SalaryCost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalaryCost indicates an expected call of GetSalaryCost.
func (mr *MockIDatabaseServiceMockRecorder) GetSalaryCost(userID, salaryCostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalaryCost", reflect.TypeOf((*MockIDatabaseService)(nil).GetSalaryCost), userID, salaryCostID)
}

// GetSalaryCostLabel mocks base method.
func (m *MockIDatabaseService) GetSalaryCostLabel(userID, salaryCostLabelID int64) (*models.SalaryCostLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalaryCostLabel", userID, salaryCostLabelID)
	ret0, _ := ret[0].(*models.SalaryCostLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalaryCostLabel indicates an expected call of GetSalaryCostLabel.
func (mr *MockIDatabaseServiceMockRecorder) GetSalaryCostLabel(userID, salaryCostLabelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalaryCostLabel", reflect.TypeOf((*MockIDatabaseService)(nil).GetSalaryCostLabel), userID, salaryCostLabelID)
}

// GetTransaction mocks base method.
func (m *MockIDatabaseService) GetTransaction(userID, transactionID int64) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", userID, transactionID)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockIDatabaseServiceMockRecorder) GetTransaction(userID, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockIDatabaseService)(nil).GetTransaction), userID, transactionID)
}

// GetUserPasswordByEMail mocks base method.
func (m *MockIDatabaseService) GetUserPasswordByEMail(email string) (*models.Login, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPasswordByEMail", email)
	ret0, _ := ret[0].(*models.Login)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPasswordByEMail indicates an expected call of GetUserPasswordByEMail.
func (mr *MockIDatabaseServiceMockRecorder) GetUserPasswordByEMail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPasswordByEMail", reflect.TypeOf((*MockIDatabaseService)(nil).GetUserPasswordByEMail), email)
}

// GetVat mocks base method.
func (m *MockIDatabaseService) GetVat(userID, vatID int64) (*models.Vat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVat", userID, vatID)
	ret0, _ := ret[0].(*models.Vat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVat indicates an expected call of GetVat.
func (mr *MockIDatabaseServiceMockRecorder) GetVat(userID, vatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVat", reflect.TypeOf((*MockIDatabaseService)(nil).GetVat), userID, vatID)
}

// ListBankAccounts mocks base method.
func (m *MockIDatabaseService) ListBankAccounts(userID int64) ([]models.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBankAccounts", userID)
	ret0, _ := ret[0].([]models.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBankAccounts indicates an expected call of ListBankAccounts.
func (mr *MockIDatabaseServiceMockRecorder) ListBankAccounts(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBankAccounts", reflect.TypeOf((*MockIDatabaseService)(nil).ListBankAccounts), userID)
}

// ListCategories mocks base method.
func (m *MockIDatabaseService) ListCategories(userID, page, limit int64) ([]models.Category, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", userID, page, limit)
	ret0, _ := ret[0].([]models.Category)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockIDatabaseServiceMockRecorder) ListCategories(userID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockIDatabaseService)(nil).ListCategories), userID, page, limit)
}

// ListCurrencies mocks base method.
func (m *MockIDatabaseService) ListCurrencies(userID int64) ([]models.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrencies", userID)
	ret0, _ := ret[0].([]models.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCurrencies indicates an expected call of ListCurrencies.
func (mr *MockIDatabaseServiceMockRecorder) ListCurrencies(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrencies", reflect.TypeOf((*MockIDatabaseService)(nil).ListCurrencies), userID)
}

// ListEmployees mocks base method.
func (m *MockIDatabaseService) ListEmployees(userID, page, limit int64, sortBy, sortOrder string) ([]models.Employee, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployees", userID, page, limit, sortBy, sortOrder)
	ret0, _ := ret[0].([]models.Employee)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEmployees indicates an expected call of ListEmployees.
func (mr *MockIDatabaseServiceMockRecorder) ListEmployees(userID, page, limit, sortBy, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployees", reflect.TypeOf((*MockIDatabaseService)(nil).ListEmployees), userID, page, limit, sortBy, sortOrder)
}

// ListFiatRates mocks base method.
func (m *MockIDatabaseService) ListFiatRates(base string) ([]models.FiatRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiatRates", base)
	ret0, _ := ret[0].([]models.FiatRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiatRates indicates an expected call of ListFiatRates.
func (mr *MockIDatabaseServiceMockRecorder) ListFiatRates(base any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiatRates", reflect.TypeOf((*MockIDatabaseService)(nil).ListFiatRates), base)
}

// ListForecastDetails mocks base method.
func (m *MockIDatabaseService) ListForecastDetails(userID, limit int64) ([]models.ForecastDatabaseDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForecastDetails", userID, limit)
	ret0, _ := ret[0].([]models.ForecastDatabaseDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForecastDetails indicates an expected call of ListForecastDetails.
func (mr *MockIDatabaseServiceMockRecorder) ListForecastDetails(userID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecastDetails", reflect.TypeOf((*MockIDatabaseService)(nil).ListForecastDetails), userID, limit)
}

// ListForecastExclusions mocks base method.
func (m *MockIDatabaseService) ListForecastExclusions(userID, relatedID int64, relatedTable string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForecastExclusions", userID, relatedID, relatedTable)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForecastExclusions indicates an expected call of ListForecastExclusions.
func (mr *MockIDatabaseServiceMockRecorder) ListForecastExclusions(userID, relatedID, relatedTable any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecastExclusions", reflect.TypeOf((*MockIDatabaseService)(nil).ListForecastExclusions), userID, relatedID, relatedTable)
}

// ListForecasts mocks base method.
func (m *MockIDatabaseService) ListForecasts(userID, limit int64) ([]models.Forecast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForecasts", userID, limit)
	ret0, _ := ret[0].([]models.Forecast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForecasts indicates an expected call of ListForecasts.
func (mr *MockIDatabaseServiceMockRecorder) ListForecasts(userID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForecasts", reflect.TypeOf((*MockIDatabaseService)(nil).ListForecasts), userID, limit)
}

// ListOrganisations mocks base method.
func (m *MockIDatabaseService) ListOrganisations(userID, page, limit int64) ([]models.Organisation, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganisations", userID, page, limit)
	ret0, _ := ret[0].([]models.Organisation)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrganisations indicates an expected call of ListOrganisations.
func (mr *MockIDatabaseServiceMockRecorder) ListOrganisations(userID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganisations", reflect.TypeOf((*MockIDatabaseService)(nil).ListOrganisations), userID, page, limit)
}

// ListSalaries mocks base method.
func (m *MockIDatabaseService) ListSalaries(userID, employeeID, page, limit int64) ([]models.Salary, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSalaries", userID, employeeID, page, limit)
	ret0, _ := ret[0].([]models.Salary)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSalaries indicates an expected call of ListSalaries.
func (mr *MockIDatabaseServiceMockRecorder) ListSalaries(userID, employeeID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSalaries", reflect.TypeOf((*MockIDatabaseService)(nil).ListSalaries), userID, employeeID, page, limit)
}

// ListSalaryCostDetails mocks base method.
func (m *MockIDatabaseService) ListSalaryCostDetails(salaryCostID int64) ([]models.SalaryCostDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSalaryCostDetails", salaryCostID)
	ret0, _ := ret[0].([]models.SalaryCostDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSalaryCostDetails indicates an expected call of ListSalaryCostDetails.
func (mr *MockIDatabaseServiceMockRecorder) ListSalaryCostDetails(salaryCostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSalaryCostDetails", reflect.TypeOf((*MockIDatabaseService)(nil).ListSalaryCostDetails), salaryCostID)
}

// ListSalaryCostLabels mocks base method.
func (m *MockIDatabaseService) ListSalaryCostLabels(userID, page, limit int64) ([]models.SalaryCostLabel, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSalaryCostLabels", userID, page, limit)
	ret0, _ := ret[0].([]models.SalaryCostLabel)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSalaryCostLabels indicates an expected call of ListSalaryCostLabels.
func (mr *MockIDatabaseServiceMockRecorder) ListSalaryCostLabels(userID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSalaryCostLabels", reflect.TypeOf((*MockIDatabaseService)(nil).ListSalaryCostLabels), userID, page, limit)
}

// ListSalaryCosts mocks base method.
func (m *MockIDatabaseService) ListSalaryCosts(userID, salaryID, page, limit int64) ([]models.SalaryCost, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSalaryCosts", userID, salaryID, page, limit)
	ret0, _ := ret[0].([]models.SalaryCost)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSalaryCosts indicates an expected call of ListSalaryCosts.
func (mr *MockIDatabaseServiceMockRecorder) ListSalaryCosts(userID, salaryID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSalaryCosts", reflect.TypeOf((*MockIDatabaseService)(nil).ListSalaryCosts), userID, salaryID, page, limit)
}

// ListTransactions mocks base method.
func (m *MockIDatabaseService) ListTransactions(userID, page, limit int64, sortBy, sortOrder string) ([]models.Transaction, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", userID, page, limit, sortBy, sortOrder)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockIDatabaseServiceMockRecorder) ListTransactions(userID, page, limit, sortBy, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockIDatabaseService)(nil).ListTransactions), userID, page, limit, sortBy, sortOrder)
}

// ListVats mocks base method.
func (m *MockIDatabaseService) ListVats(userID int64) ([]models.Vat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVats", userID)
	ret0, _ := ret[0].([]models.Vat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVats indicates an expected call of ListVats.
func (mr *MockIDatabaseServiceMockRecorder) ListVats(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVats", reflect.TypeOf((*MockIDatabaseService)(nil).ListVats), userID)
}

// RefreshSalaryCostDetails mocks base method.
func (m *MockIDatabaseService) RefreshSalaryCostDetails(userID, salaryID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshSalaryCostDetails", userID, salaryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshSalaryCostDetails indicates an expected call of RefreshSalaryCostDetails.
func (mr *MockIDatabaseServiceMockRecorder) RefreshSalaryCostDetails(userID, salaryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSalaryCostDetails", reflect.TypeOf((*MockIDatabaseService)(nil).RefreshSalaryCostDetails), userID, salaryID)
}

// ResetPassword mocks base method.
func (m *MockIDatabaseService) ResetPassword(password, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", password, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockIDatabaseServiceMockRecorder) ResetPassword(password, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockIDatabaseService)(nil).ResetPassword), password, email)
}

// SetUserCurrentOrganisation mocks base method.
func (m *MockIDatabaseService) SetUserCurrentOrganisation(userID, organisationID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserCurrentOrganisation", userID, organisationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserCurrentOrganisation indicates an expected call of SetUserCurrentOrganisation.
func (mr *MockIDatabaseServiceMockRecorder) SetUserCurrentOrganisation(userID, organisationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserCurrentOrganisation", reflect.TypeOf((*MockIDatabaseService)(nil).SetUserCurrentOrganisation), userID, organisationID)
}

// StoreRefreshTokenID mocks base method.
func (m *MockIDatabaseService) StoreRefreshTokenID(userID int64, tokenId string, expirationTime time.Time, deviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRefreshTokenID", userID, tokenId, expirationTime, deviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRefreshTokenID indicates an expected call of StoreRefreshTokenID.
func (mr *MockIDatabaseServiceMockRecorder) StoreRefreshTokenID(userID, tokenId, expirationTime, deviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRefreshTokenID", reflect.TypeOf((*MockIDatabaseService)(nil).StoreRefreshTokenID), userID, tokenId, expirationTime, deviceName)
}

// UpdateBankAccount mocks base method.
func (m *MockIDatabaseService) UpdateBankAccount(payload models.UpdateBankAccount, userID, bankAccountID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBankAccount", payload, userID, bankAccountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBankAccount indicates an expected call of UpdateBankAccount.
func (mr *MockIDatabaseServiceMockRecorder) UpdateBankAccount(payload, userID, bankAccountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBankAccount", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateBankAccount), payload, userID, bankAccountID)
}

// UpdateCategory mocks base method.
func (m *MockIDatabaseService) UpdateCategory(userID int64, payload models.UpdateCategory, categoryID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", userID, payload, categoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockIDatabaseServiceMockRecorder) UpdateCategory(userID, payload, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateCategory), userID, payload, categoryID)
}

// UpdateCurrency mocks base method.
func (m *MockIDatabaseService) UpdateCurrency(payload models.UpdateCurrency, currencyID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrency", payload, currencyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCurrency indicates an expected call of UpdateCurrency.
func (mr *MockIDatabaseServiceMockRecorder) UpdateCurrency(payload, currencyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrency", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateCurrency), payload, currencyID)
}

// UpdateEmployee mocks base method.
func (m *MockIDatabaseService) UpdateEmployee(payload models.UpdateEmployee, userID, employeeID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployee", payload, userID, employeeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployee indicates an expected call of UpdateEmployee.
func (mr *MockIDatabaseServiceMockRecorder) UpdateEmployee(payload, userID, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateEmployee), payload, userID, employeeID)
}

// UpdateOrganisation mocks base method.
func (m *MockIDatabaseService) UpdateOrganisation(payload models.UpdateOrganisation, userID, organisationID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganisation", payload, userID, organisationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganisation indicates an expected call of UpdateOrganisation.
func (mr *MockIDatabaseServiceMockRecorder) UpdateOrganisation(payload, userID, organisationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganisation", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateOrganisation), payload, userID, organisationID)
}

// UpdatePassword mocks base method.
func (m *MockIDatabaseService) UpdatePassword(password string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", password, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockIDatabaseServiceMockRecorder) UpdatePassword(password, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockIDatabaseService)(nil).UpdatePassword), password, userID)
}

// UpdateProfile mocks base method.
func (m *MockIDatabaseService) UpdateProfile(payload models.UpdateUser, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", payload, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockIDatabaseServiceMockRecorder) UpdateProfile(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateProfile), payload, userID)
}

// UpdateSalary mocks base method.
func (m *MockIDatabaseService) UpdateSalary(payload models.UpdateSalary, employeeID, salaryID int64) (*int64, *int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSalary", payload, employeeID, salaryID)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSalary indicates an expected call of UpdateSalary.
func (mr *MockIDatabaseServiceMockRecorder) UpdateSalary(payload, employeeID, salaryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSalary", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateSalary), payload, employeeID, salaryID)
}

// UpdateSalaryCost mocks base method.
func (m *MockIDatabaseService) UpdateSalaryCost(payload models.CreateSalaryCost, userID, salaryCostID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSalaryCost", payload, userID, salaryCostID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSalaryCost indicates an expected call of UpdateSalaryCost.
func (mr *MockIDatabaseServiceMockRecorder) UpdateSalaryCost(payload, userID, salaryCostID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSalaryCost", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateSalaryCost), payload, userID, salaryCostID)
}

// UpdateSalaryCostLabel mocks base method.
func (m *MockIDatabaseService) UpdateSalaryCostLabel(payload models.CreateSalaryCostLabel, userID, salaryCostLabelID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSalaryCostLabel", payload, userID, salaryCostLabelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSalaryCostLabel indicates an expected call of UpdateSalaryCostLabel.
func (mr *MockIDatabaseServiceMockRecorder) UpdateSalaryCostLabel(payload, userID, salaryCostLabelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSalaryCostLabel", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateSalaryCostLabel), payload, userID, salaryCostLabelID)
}

// UpdateTransaction mocks base method.
func (m *MockIDatabaseService) UpdateTransaction(payload models.UpdateTransaction, userID, transactionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", payload, userID, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockIDatabaseServiceMockRecorder) UpdateTransaction(payload, userID, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateTransaction), payload, userID, transactionID)
}

// UpdateVat mocks base method.
func (m *MockIDatabaseService) UpdateVat(payload models.UpdateVat, userID, vatID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVat", payload, userID, vatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVat indicates an expected call of UpdateVat.
func (mr *MockIDatabaseServiceMockRecorder) UpdateVat(payload, userID, vatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVat", reflect.TypeOf((*MockIDatabaseService)(nil).UpdateVat), payload, userID, vatID)
}

// UpsertFiatRate mocks base method.
func (m *MockIDatabaseService) UpsertFiatRate(payload models.CreateFiatRate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertFiatRate", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertFiatRate indicates an expected call of UpsertFiatRate.
func (mr *MockIDatabaseServiceMockRecorder) UpsertFiatRate(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertFiatRate", reflect.TypeOf((*MockIDatabaseService)(nil).UpsertFiatRate), payload)
}

// UpsertForecast mocks base method.
func (m *MockIDatabaseService) UpsertForecast(payload models.CreateForecast, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertForecast", payload, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertForecast indicates an expected call of UpsertForecast.
func (mr *MockIDatabaseServiceMockRecorder) UpsertForecast(payload, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertForecast", reflect.TypeOf((*MockIDatabaseService)(nil).UpsertForecast), payload, userID)
}

// UpsertForecastDetail mocks base method.
func (m *MockIDatabaseService) UpsertForecastDetail(payload models.CreateForecastDetail, userID, forecastID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertForecastDetail", payload, userID, forecastID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertForecastDetail indicates an expected call of UpsertForecastDetail.
func (mr *MockIDatabaseServiceMockRecorder) UpsertForecastDetail(payload, userID, forecastID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertForecastDetail", reflect.TypeOf((*MockIDatabaseService)(nil).UpsertForecastDetail), payload, userID, forecastID)
}

// UpsertSalaryCostDetails mocks base method.
func (m *MockIDatabaseService) UpsertSalaryCostDetails(payload models.CreateSalaryCostDetail) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSalaryCostDetails", payload)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSalaryCostDetails indicates an expected call of UpsertSalaryCostDetails.
func (mr *MockIDatabaseServiceMockRecorder) UpsertSalaryCostDetails(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSalaryCostDetails", reflect.TypeOf((*MockIDatabaseService)(nil).UpsertSalaryCostDetails), payload)
}

// ValidateRegistration mocks base method.
func (m *MockIDatabaseService) ValidateRegistration(email, code string, hours time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRegistration", email, code, hours)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRegistration indicates an expected call of ValidateRegistration.
func (mr *MockIDatabaseServiceMockRecorder) ValidateRegistration(email, code, hours any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRegistration", reflect.TypeOf((*MockIDatabaseService)(nil).ValidateRegistration), email, code, hours)
}

// ValidateResetPassword mocks base method.
func (m *MockIDatabaseService) ValidateResetPassword(email, code string, hours time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateResetPassword", email, code, hours)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateResetPassword indicates an expected call of ValidateResetPassword.
func (mr *MockIDatabaseServiceMockRecorder) ValidateResetPassword(email, code, hours any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateResetPassword", reflect.TypeOf((*MockIDatabaseService)(nil).ValidateResetPassword), email, code, hours)
}
