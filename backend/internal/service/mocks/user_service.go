// Code generated by MockGen. DO NOT EDIT.
// Source: liquiswiss/internal/service/user_service (interfaces: IUserService)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination ../mocks/user_service.go liquiswiss/internal/service/user_service IUserService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "liquiswiss/pkg/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
	isgomock struct{}
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// GetCurrentOrganisation mocks base method.
func (m *MockIUserService) GetCurrentOrganisation(userID int64) (*models.Organisation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentOrganisation", userID)
	ret0, _ := ret[0].(*models.Organisation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentOrganisation indicates an expected call of GetCurrentOrganisation.
func (mr *MockIUserServiceMockRecorder) GetCurrentOrganisation(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentOrganisation", reflect.TypeOf((*MockIUserService)(nil).GetCurrentOrganisation), userID)
}
