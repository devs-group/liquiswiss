// Code generated by MockGen. DO NOT EDIT.
// Source: liquiswiss/internal/service/fixer_io_service (interfaces: IFixerIOService)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination ../mocks/fixer_io_service.go liquiswiss/internal/service/fixer_io_service IFixerIOService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIFixerIOService is a mock of IFixerIOService interface.
type MockIFixerIOService struct {
	ctrl     *gomock.Controller
	recorder *MockIFixerIOServiceMockRecorder
}

// MockIFixerIOServiceMockRecorder is the mock recorder for MockIFixerIOService.
type MockIFixerIOServiceMockRecorder struct {
	mock *MockIFixerIOService
}

// NewMockIFixerIOService creates a new mock instance.
func NewMockIFixerIOService(ctrl *gomock.Controller) *MockIFixerIOService {
	mock := &MockIFixerIOService{ctrl: ctrl}
	mock.recorder = &MockIFixerIOServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFixerIOService) EXPECT() *MockIFixerIOServiceMockRecorder {
	return m.recorder
}

// FetchFiatRates mocks base method.
func (m *MockIFixerIOService) FetchFiatRates() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FetchFiatRates")
}

// FetchFiatRates indicates an expected call of FetchFiatRates.
func (mr *MockIFixerIOServiceMockRecorder) FetchFiatRates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFiatRates", reflect.TypeOf((*MockIFixerIOService)(nil).FetchFiatRates))
}

// RequiresInitialFetch mocks base method.
func (m *MockIFixerIOService) RequiresInitialFetch() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequiresInitialFetch")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequiresInitialFetch indicates an expected call of RequiresInitialFetch.
func (mr *MockIFixerIOServiceMockRecorder) RequiresInitialFetch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequiresInitialFetch", reflect.TypeOf((*MockIFixerIOService)(nil).RequiresInitialFetch))
}
