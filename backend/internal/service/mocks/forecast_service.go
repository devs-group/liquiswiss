// Code generated by MockGen. DO NOT EDIT.
// Source: liquiswiss/internal/service/forecast_service (interfaces: IForecastService)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination ../mocks/forecast_service.go liquiswiss/internal/service/forecast_service IForecastService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "liquiswiss/pkg/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIForecastService is a mock of IForecastService interface.
type MockIForecastService struct {
	ctrl     *gomock.Controller
	recorder *MockIForecastServiceMockRecorder
	isgomock struct{}
}

// MockIForecastServiceMockRecorder is the mock recorder for MockIForecastService.
type MockIForecastServiceMockRecorder struct {
	mock *MockIForecastService
}

// NewMockIForecastService creates a new mock instance.
func NewMockIForecastService(ctrl *gomock.Controller) *MockIForecastService {
	mock := &MockIForecastService{ctrl: ctrl}
	mock.recorder = &MockIForecastServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIForecastService) EXPECT() *MockIForecastServiceMockRecorder {
	return m.recorder
}

// CalculateForecast mocks base method.
func (m *MockIForecastService) CalculateForecast(userID int64) ([]models.Forecast, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateForecast", userID)
	ret0, _ := ret[0].([]models.Forecast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateForecast indicates an expected call of CalculateForecast.
func (mr *MockIForecastServiceMockRecorder) CalculateForecast(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateForecast", reflect.TypeOf((*MockIForecastService)(nil).CalculateForecast), userID)
}
