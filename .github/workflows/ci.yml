name: CI/CD Pipeline

on:
  pull_request:
    paths:
      - '.github/**'
      - 'frontend/**'
      - 'backend/**'
  push:
    branches:
      - main

env:
  NUXT_IMAGE: ghcr.io/${{ github.repository }}/nuxt:latest
  NUXT_IMAGE_ARTIFACT: nuxt-image
  NUXT_IMAGE_ZIP_FILE: nuxt-image.tar.gz
  BACKEND_IMAGE: ghcr.io/${{ github.repository }}/backend:latest
  BACKEND_IMAGE_ARTIFACT: backend-image
  BACKEND_IMAGE_ZIP_FILE: backend-image.tar.gz

jobs:
  lint-nuxt:
    name: Lint Nuxt
    runs-on: ubuntu-latest
    #    if: github.ref != 'refs/heads/main'
    container:
      image: node:20.11.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        working-directory: frontend
        run: npm install

      - name: Run Nuxt lint
        working-directory: frontend
        run: npm run lint .

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    services:
      database-testing:
        image: mariadb:10.6.16
        options: >-
          --health-cmd "healthcheck.sh --connect --innodb_initialized"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          MARIADB_USER: "test"
          MARIADB_PASSWORD: "test"
          MARIADB_DATABASE: "test"
          MARIADB_ROOT_PASSWORD: "test"
    #    if: github.ref != 'refs/heads/main'
    container:
      image: golang:1.23.3-alpine
    env:
      TESTING_ENVIRONMENT: "github"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        working-directory: backend
        run: go get

      - name: Run Backend Tests
        working-directory: backend
        run: go test ./...

  build-nuxt:
    name: Build Nuxt
    runs-on: ubuntu-latest
    needs: [ lint-nuxt, test-backend ]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Tag Docker Image
        run: docker build -f ./.deploy/nuxt/Dockerfile -t ${{ env.NUXT_IMAGE }} ./

      - name: Save Nuxt Image as Tarball
        run: docker save ${{ env.NUXT_IMAGE }} | gzip > ${{ env.NUXT_IMAGE_ZIP_FILE }}

      - name: Upload Nuxt Image as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NUXT_IMAGE_ARTIFACT }}
          path: ${{ env.NUXT_IMAGE_ZIP_FILE }}

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [ lint-nuxt, test-backend ]
    if: github.ref == 'refs/heads/main'
    env:
      IMAGE: ghcr.io/${{ github.repository }}/backend:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Tag Docker Image
        run: docker build -f ./.deploy/backend/Dockerfile -t ${{ env.BACKEND_IMAGE }} ./

      - name: Save Nuxt Image as Tarball
        run: docker save ${{ env.BACKEND_IMAGE }} | gzip > ${{ env.BACKEND_IMAGE_ZIP_FILE }}

      - name: Upload Nuxt Image as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BACKEND_IMAGE_ARTIFACT }}
          path: ${{ env.BACKEND_IMAGE_ZIP_FILE }}

  push-images:
    name: Push Images
    runs-on: ubuntu-latest
    needs: [ build-nuxt, build-backend ]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download Nuxt Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.NUXT_IMAGE_ARTIFACT }}

      - name: Download Backend Image Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BACKEND_IMAGE_ARTIFACT }}

      - name: Load Nuxt Image
        run: gunzip < ${{ env.NUXT_IMAGE_ZIP_FILE }} | docker load

      - name: Load Backend Image
        run: gunzip < ${{ env.BACKEND_IMAGE_ZIP_FILE }} | docker load

      - name: Log in to Docker registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Nuxt Image
        run: docker push ${{ env.NUXT_IMAGE }}

      - name: Push Backend Image
        run: docker push ${{ env.BACKEND_IMAGE }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [ push-images ]
    if: github.ref == 'refs/heads/main'
    env:
      DEPLOY_URL: ${{ secrets.DEPLOY_URL }}
      DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
    container:
      image: alpine:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install curl
        run: apk add --no-cache curl

      - name: Deploy Application
        run: sh ./.deploy/deploy.sh